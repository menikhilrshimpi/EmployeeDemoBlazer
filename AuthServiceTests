using EmployeeManagementSystem.Services;
using Moq;
using Newtonsoft.Json;
using System.IO;
using System.Text;
using Xunit;
using Microsoft.AspNetCore.Hosting;

namespace EmployeeManagementSystem.Tests.Services
{
    public class AuthServiceTests
    {
        private readonly Mock<IWebHostEnvironment> _webHostEnvironmentMock;
        private readonly Mock<IFileWrapper> _fileWrapperMock;
        private readonly AuthService _authService;

        public AuthServiceTests()
        {
            _webHostEnvironmentMock = new Mock<IWebHostEnvironment>();
            _fileWrapperMock = new Mock<IFileWrapper>();
            
            // Mock WebRootPath
            _webHostEnvironmentMock.Setup(e => e.WebRootPath).Returns("wwwroot");
            
            // Initialize AuthService with mocked dependencies
            _authService = new AuthService(_webHostEnvironmentMock.Object, _fileWrapperMock.Object);
        }

        [Fact]
        public async Task SetCurrentUserAsync_SetsUserCorrectly()
        {
            // Arrange
            var user = new User { Username = "testuser", Password = "password123" };

            // Act
            await _authService.SetCurrentUserAsync(user);

            // Assert
            var currentUser = await _authService.GetCurrentUserAsync();
            Assert.Equal("testuser", currentUser.Username);
        }

        [Fact]
        public async Task GetCurrentUserAsync_ReturnsNullIfNoUserSet()
        {
            // Act
            var result = await _authService.GetCurrentUserAsync();

            // Assert
            Assert.Null(result);
        }

        [Fact]
        public async Task LoginAsync_WhenUserExists_ReturnsUser()
        {
            // Arrange
            var users = new List<User>
            {
                new User { Username = "testuser", Password = "password123" }
            };

            _fileWrapperMock.Setup(f => f.Exists(It.IsAny<string>())).Returns(true);
            _fileWrapperMock.Setup(f => f.ReadAllTextAsync(It.IsAny<string>())).ReturnsAsync(JsonConvert.SerializeObject(users));

            // Act
            var result = await _authService.LoginAsync("testuser", "password123");

            // Assert
            Assert.NotNull(result);
            Assert.Equal("testuser", result.Username);
        }

        [Fact]
        public async Task LoginAsync_WhenUserDoesNotExist_ReturnsNull()
        {
            // Arrange
            _fileWrapperMock.Setup(f => f.Exists(It.IsAny<string>())).Returns(true);
            _fileWrapperMock.Setup(f => f.ReadAllTextAsync(It.IsAny<string>())).ReturnsAsync("[]");

            // Act
            var result = await _authService.LoginAsync("nonexistent", "wrongpass");

            // Assert
            Assert.Null(result);
        }

        [Fact]
        public async Task RegisterAsync_AddsNewUserAndSavesToFile()
        {
            // Arrange
            var users = new List<User>();
            var newUser = new User { Username = "newuser", Password = "password123" };

            _fileWrapperMock.Setup(f => f.Exists(It.IsAny<string>())).Returns(true);
            _fileWrapperMock.Setup(f => f.ReadAllTextAsync(It.IsAny<string>())).ReturnsAsync("[]");
            _fileWrapperMock.Setup(f => f.WriteAllTextAsync(It.IsAny<string>(), It.IsAny<string>()))
                .Callback<string, string>((_, json) =>
                {
                    users = JsonConvert.DeserializeObject<List<User>>(json);
                });

            // Act
            await _authService.RegisterAsync(newUser);

            // Assert
            Assert.Single(users);
            Assert.Equal("newuser", users[0].Username);
        }

        [Fact]
        public async Task GetUsersAsync_WhenFileDoesNotExist_ReturnsEmptyList()
        {
            // Arrange
            _fileWrapperMock.Setup(f => f.Exists(It.IsAny<string>())).Returns(false);

            // Act
            var result = await _authService.GetUsersAsync();

            // Assert
            Assert.Empty(result);
        }

        [Fact]
        public async Task GetUsersAsync_WhenFileExists_ReturnsUsers()
        {
            // Arrange
            var users = new List<User>
            {
                new User { Username = "user1", Password = "pass1" },
                new User { Username = "user2", Password = "pass2" }
            };

            _fileWrapperMock.Setup(f => f.Exists(It.IsAny<string>())).Returns(true);
            _fileWrapperMock.Setup(f => f.ReadAllTextAsync(It.IsAny<string>())).ReturnsAsync(JsonConvert.SerializeObject(users));

            // Act
            var result = await _authService.GetUsersAsync();

            // Assert
            Assert.Equal(2, result.Count);
            Assert.Equal("user1", result[0].Username);
        }
    }

    // Mock File Operations (since System.IO.File is static)
    public interface IFileWrapper
    {
        bool Exists(string path);
        Task<string> ReadAllTextAsync(string path);
        Task WriteAllTextAsync(string path, string contents);
    }

    public class FileWrapper : IFileWrapper
    {
        public bool Exists(string path) => File.Exists(path);
        public Task<string> ReadAllTextAsync(string path) => File.ReadAllTextAsync(path);
        public Task WriteAllTextAsync(string path, string contents) => File.WriteAllTextAsync(path, contents);
    }
}
