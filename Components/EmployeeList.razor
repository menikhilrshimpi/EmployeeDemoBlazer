@page "/employees"
@attribute [Authorize]
@inject IEmployeeService EmployeeService
@inject NavigationManager NavigationManager

<div class="employee-directory-container">
    <div class="directory-header">
        <h1>Employee Directory</h1>
        <div class="header-actions">
            <AuthorizeView Roles="Admin">
                <Authorized>
                    <button @onclick="AddNewEmployee" class="btn-new-employee">
                        + New Employee
                    </button>
                </Authorized>
            </AuthorizeView>
            <div class="search-container">
                <input type="text" @bind="searchTerm" placeholder="Search employees..." class="search-input" />
                <button @onclick="SearchEmployees" class="search-button">Search</button>
            </div>
        </div>
    </div>

    <div class="directory-content">
        <div class="employee-list">
            <div class="list-header">
                <div class="header-item">Name</div>                
                <div class="header-item">Job Title</div>
                <div class="header-item">Project </div>
                <div class="header-item">Actions</div>
            </div>

            @if (isLoading)
            {
                <div class="loading">Loading employees...</div>
            }
            else if (filteredEmployees == null || !filteredEmployees.Any())
            {
                <div class="no-results">No employees found</div>
            }
            else
            {
                @foreach (var employee in pagedEmployees)
                {
                    <div class="employee-item">
                        <div class="employee-detail">
                            <div class="employee-name">@employee.Name</div>
                            <div class="employee-email">@employee.Email</div>
                        </div>
                        <div class="employee-detail">@employee.Designation</div>
                        <div class="employee-detail">@employee.ProjectAccountName</div>
                        <div class="employee-actions">
                            <button @onclick="() => EditEmployee(employee.Id)" class="action-btn update">Update</button>
                            <AuthorizeView Roles="Admin">
                                <Authorized>
                                    <button @onclick="() => ShowDeleteModal(employee.Id)" class="action-btn delete">Delete</button>
                                </Authorized>
                            </AuthorizeView>
                        </div>
                    </div>
                }
            }
        </div>

        @if (filteredEmployees?.Count > pageSize)
        {
            <div class="pagination-container">
                <div class="pagination-info">
                    Showing @((currentPage - 1) * pageSize + 1)-@(Math.Min(currentPage * pageSize, filteredEmployees.Count)) of @filteredEmployees.Count employees
                </div>
                <div class="pagination-controls">
                    <button @onclick="() => ChangePage(1)" disabled="@(currentPage == 1)" class="pagination-button">
                        &laquo;
                    </button>
                    <button @onclick="() => ChangePage(currentPage - 1)" disabled="@(currentPage == 1)" class="pagination-button">
                        &lsaquo;
                    </button>

                    @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                    {
                        <button @onclick="() => ChangePage(i)" class="@(currentPage == i ? "pagination-button active" : "pagination-button")">
                            @i
                        </button>
                    }

                    <button @onclick="() => ChangePage(currentPage + 1)" disabled="@(currentPage == totalPages)" class="pagination-button">
                        &rsaquo;
                    </button>
                    <button @onclick="() => ChangePage(totalPages)" disabled="@(currentPage == totalPages)" class="pagination-button">
                        &raquo;
                    </button>
                </div>
            </div>
        }
    </div>
</div>

<!-- Delete Confirmation Modal -->
@if (showDeleteModal)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <h3>Confirm Delete</h3>
            <p>Are you sure you want to delete this employee?</p>
            <div class="modal-actions">
                <button @onclick="CloseDeleteModal" class="btn-cancel">Cancel</button>
                <button @onclick="ConfirmDelete" class="btn-confirm">Delete</button>
            </div>
        </div>
    </div>
}

@code {
    private List<Employee> allEmployees = new List<Employee>();
    private List<Employee> filteredEmployees = new List<Employee>();
    private List<Employee> pagedEmployees = new List<Employee>();
    private string searchTerm;
    private bool showDeleteModal;
    private int employeeIdToDelete;
    private int currentPage = 1;
    private const int pageSize = 10;
    private int totalPages = 1;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            allEmployees = await EmployeeService.GetEmployeesAsync() ?? new List<Employee>();
            filteredEmployees = allEmployees;
            UpdatePagedEmployees();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void UpdatePagedEmployees()
    {
        if (filteredEmployees == null)
        {
            filteredEmployees = new List<Employee>();
        }

        totalPages = (int)Math.Ceiling(filteredEmployees.Count / (double)pageSize);
        currentPage = Math.Clamp(currentPage, 1, totalPages);

        pagedEmployees = filteredEmployees
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private async Task SearchEmployees()
    {
        isLoading = true;
        try
        {
            if (string.IsNullOrWhiteSpace(searchTerm))
            {
                filteredEmployees = allEmployees;
            }
            else
            {
                filteredEmployees = await EmployeeService.SearchEmployeesAsync(searchTerm) ?? new List<Employee>();
            }
            currentPage = 1;
            UpdatePagedEmployees();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ChangePage(int page)
    {
        currentPage = page;
        UpdatePagedEmployees();
    }

    private void AddNewEmployee()
    {
        NavigationManager.NavigateTo("/employees/add");
    }

    private void EditEmployee(int id)
    {
        NavigationManager.NavigateTo($"/employees/edit/{id}");
    }

    private void ShowDeleteModal(int id)
    {
        employeeIdToDelete = id;
        showDeleteModal = true;
    }

    private void CloseDeleteModal()
    {
        showDeleteModal = false;
    }

    private async Task ConfirmDelete()
    {
        try
        {
            isLoading = true;
            await EmployeeService.DeleteEmployeeAsync(employeeIdToDelete);
            allEmployees = await EmployeeService.GetEmployeesAsync() ?? new List<Employee>();
            filteredEmployees = allEmployees;
            UpdatePagedEmployees();
        }
        finally
        {
            isLoading = false;
            showDeleteModal = false;
        }
    }
}