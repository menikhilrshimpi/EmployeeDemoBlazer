using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Authorization;
using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
using Microsoft.AspNetCore.Components.Web;
using Microsoft.AspNetCore.Identity;
using Microsoft.Extensions.DependencyInjection;
using System.Text.Json;

var builder = WebApplication.CreateBuilder(args);
builder.Services.AddRazorPages();
builder.Services.AddServerSideBlazor();
builder.Services.AddSingleton<EmployeeService>();
builder.Services.AddAuthorizationCore();
builder.Services.AddScoped<AuthenticationStateProvider, CustomAuthStateProvider>();

var app = builder.Build();

if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Error");
}

app.UseStaticFiles();
app.UseRouting();

app.MapBlazorHub();
app.MapFallbackToPage("/_Host");

app.Run();

// Custom Authentication State Provider
public class CustomAuthStateProvider : AuthenticationStateProvider
{
    private readonly ProtectedSessionStorage _sessionStorage;
    private ClaimsPrincipal _anonymous = new ClaimsPrincipal(new ClaimsIdentity());

    public CustomAuthStateProvider(ProtectedSessionStorage sessionStorage)
    {
        _sessionStorage = sessionStorage;
    }

    public override async Task<AuthenticationState> GetAuthenticationStateAsync()
    {
        try
        {
            var result = await _sessionStorage.GetAsync<User>("authUser");
            var user = result.Success ? result.Value : null;

            if (user == null)
                return new AuthenticationState(_anonymous);

            var identity = new ClaimsIdentity(new[] {
                new Claim(ClaimTypes.Name, user.Email),
                new Claim(ClaimTypes.Role, user.Role)
            }, "auth");

            var principal = new ClaimsPrincipal(identity);
            return new AuthenticationState(principal);
        }
        catch
        {
            return new AuthenticationState(_anonymous);
        }
    }

    public async Task Login(User user)
    {
        await _sessionStorage.SetAsync("authUser", user);
        NotifyAuthenticationStateChanged(GetAuthenticationStateAsync());
    }

    public async Task Logout()
    {
        await _sessionStorage.DeleteAsync("authUser");
        NotifyAuthenticationStateChanged(GetAuthenticationStateAsync());
    }
}

// User Model
public class User
{
    public string Email { get; set; }
    public string Password { get; set; }
    public string Role { get; set; } // Admin or Employee
}

// Employee Model
public class Employee
{
    public int ID { get; set; }
    public string Name { get; set; }
    public string Email { get; set; }
    public string Phone { get; set; }
    public string Address { get; set; }
    public string State { get; set; }
    public string City { get; set; }
    public string ProjectAccountName { get; set; }
    public string Designation { get; set; }
    public decimal CTC { get; set; }
}

// Employee Service to Read/Write JSON
public class EmployeeService
{
    private readonly string employeeFile = "Data/employees.json";
    private readonly string userFile = "Data/users.json";

    public List<Employee> GetEmployees()
    {
        if (!File.Exists(employeeFile)) return new List<Employee>();
        var json = File.ReadAllText(employeeFile);
        return JsonSerializer.Deserialize<List<Employee>>(json);
    }

    public Employee GetEmployeeById(int id) => GetEmployees().FirstOrDefault(e => e.ID == id);

    public void AddOrUpdateEmployee(Employee emp)
    {
        var employees = GetEmployees();
        var existing = employees.FirstOrDefault(e => e.ID == emp.ID);
        if (existing != null)
        {
            employees.Remove(existing);
        }
        employees.Add(emp);
        SaveEmployees(employees);
    }

    public void DeleteEmployee(int id)
    {
        var employees = GetEmployees();
        var emp = employees.FirstOrDefault(e => e.ID == id);
        if (emp != null)
        {
            employees.Remove(emp);
            SaveEmployees(employees);
        }
    }

    public List<Employee> SearchEmployees(string keyword) =>
        GetEmployees().Where(e => e.Name.Contains(keyword, StringComparison.OrdinalIgnoreCase)).ToList();

    private void SaveEmployees(List<Employee> employees)
    {
        var json = JsonSerializer.Serialize(employees);
        File.WriteAllText(employeeFile, json);
    }

    public void RegisterUser(User user)
    {
        var users = GetUsers();
        users.Add(user);
        var json = JsonSerializer.Serialize(users);
        File.WriteAllText(userFile, json);
    }

    public User Login(string email, string password) =>
        GetUsers().FirstOrDefault(u => u.Email == email && u.Password == password);

    private List<User> GetUsers()
    {
        if (!File.Exists(userFile)) return new List<User>();
        var json = File.ReadAllText(userFile);
        return JsonSerializer.Deserialize<List<User>>(json);
    }
}
